package com.xingcloud.tasks{	/**	 *顺序执行任务。	 * <p>此复合任务中的子任务按照先后顺序进行执行，只有当上一个任务执行完毕后，下一个任务才开始执行。</p>	 */		public class SerialTask extends CompositeTask	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////		/** @private */		protected var _currentTask:Task;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////		/**		 *实例化一个顺序执行任务		 * @param delay 延迟执行时间		 * @param timeOut 超时时间		 * @param retryCount 重试次数		 * 		 */				public function SerialTask(delay:uint=0,timeOut:uint=999999,retryCount:uint=0)		{			super(delay,timeOut,retryCount);		}				////////////////////////////////////////////////////////////////////////////////////////		// Override Method                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * @inheritDoc 		 */				override protected function next():Boolean		{			if(super.next())			{				_currentTask=_exeQueue.shift();				addTaskListeners(_currentTask);				_currentTask.execute();				return true;			}			else				return false;		}					////////////////////////////////////////////////////////////////////////////////////////		// Private Methods                                                                    //		////////////////////////////////////////////////////////////////////////////////////////				////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////		/**		 *获取当前运行任务 		 * 		 */				public function get currentTask():Task		{			return _currentTask;		}	}}